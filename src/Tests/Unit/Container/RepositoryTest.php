<?php

require_once 'H:\Development\_Webroot\Trunk\VersionControl\Hg\Container\Repository.php';

/**
 * Test class for VersionControl_Hg_Container_Repository.
 * Generated by PHPUnit on 2011-04-06 at 13:43:09.
 */
class VersionControl_Hg_Container_RepositoryTest extends PHPUnit_Framework_TestCase
{
    /**
     *
     * Enter description here ...
     * @var unknown_type
     */
    public $test_repository = 'H:\Development\_Webroot\Trunk\Tests\Fixtures\Test_Repository';

    /**
     *
     * Enter description here ...
     * @var unknown_type
     */
    public $other_repository = 'H:\Development\_Webroot\Trunk\Tests\Fixtures\Test_Repository2';

    /**
     *
     * Enter description here ...
     * @var unknown_type
     */
    public $invalid_repo = 'C:\Windows\Temp';

    /**
     *
     * Enter description here ...
     * @var unknown_type
     */
    public $nonexistant_path = 'C:\Temp';

    /**
     * @var VersionControl_Hg_Container_Repository
     */
    public $object;

    public $hg;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->hg = new VersionControl_Hg();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->hg = null;
        unset($this->hg);
    }

    /**
     *
     */
    public function testGetInstance()
    {
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, $this->test_repository);

        $this->assertInstanceOf('VersionControl_Hg_Container_Repository', $object);
    }

    /**
     *
     * Enter description here ...
     */
    function testAccessingConstructorExplicitlyShouldFail() {
         // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );

        /* can test for expected PHP errors */
        //$this->setExpectedException('PHPUnit_Framework_Error');
        //$this->object = new VersionControl_Hg_Container_Repository($this->test_repository);
    }

    public function testSetPathWithArgumentAsAnArray() {
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        $object::reset();

        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        //is a private property
        $object->setPath(array($this->test_repository));

        $this->assertEquals($this->test_repository, $object->getPath());
    }

    public function testConstructorWithPathAsAnArray() {
        //These are here to clear the singleton from previous tests, which unsetting $hg in tearDown does NOT seem to do!
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        $object::reset();

        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, array($this->test_repository));

        $expected = $this->test_repository;
        $actual = $object->getPath();
        $this->assertEquals($expected, $actual);
    }

    public function testNullPathIsOK() {
        //These are here to clear the singleton from previous tests, which unsetting $hg in tearDown does NOT seem to do!
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        $object::reset();

        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);

        $this->assertInstanceOf('VersionControl_Hg_Container_Repository', $object);
        $this->assertNull($object->getPath());
    }

    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function testConstructorWithNullSignature()
    {
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        $object::reset();

        //This should fail, since we require $hg
        $object = VersionControl_Hg_Container_Repository::getInstance();
    }

    public function testConstructorWithValidRepository()
    {
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        $object::reset();

        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, $this->test_repository);
        $expected = $this->test_repository;
        $actual = $object->getPath();
        $this->assertEquals($expected, $actual);
    }

    /**
     *
     */
    public function testConstructorWithAnInvalidRepository()
    {
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        $object::reset();

        $this->setExpectedException('VersionControl_Hg_Container_Repository_Exception');
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, $this->invalid_repo);
    }

    public function testConstructorWithNonExistantPath()
    {
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        $object::reset();

        $this->setExpectedException('VersionControl_Hg_Container_Repository_Exception');
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, $this->nonexistant_path);
    }

    /**
     *
     */
    public function testSetPathMustAlwaysHaveAnArgument() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     *
     */
    public function testSetPath()
    {
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        $object::reset();

        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        //is a private property
        $object->setPath($this->test_repository);

        $this->assertEquals($this->test_repository, $object->getPath());
    }
    //covered by testSetPath: public function testGetPath()
    //to properly test this, $_path would need to be publicized; but we don't want this, since we
    //need it to call setPath() which performs validation routines.
    //Would be nice if PHP could specify if a property was only readable

    /**
     * @todo Implement testCreate().
     */
    public function testCreate()
    {
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        $object->create($this->other_repository);

        $this->assertEquals($this->other_repository, $object->getPath());
    }

    public function testDeletedRepositoryIsUnlinked() {
//DEPENDENCY: it assumes a repo was created in testCreate!
        VersionControl_Hg_Container_Repository::reset();
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, $this->other_repository);
        $object->delete();

        $this->assertFileNotExists($this->other_repository);
    }

    public function testRepositoryObjectIsResetAfterDeletion() {
        VersionControl_Hg_Container_Repository::reset();
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, null);
        $object->create($this->other_repository);

        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, $this->other_repository);
        $object->delete();

        $this->assertNull($object->getPath());
    }

    /**
     *
     * @expectedException PHPUnit_Framework_Error
     */
    public function testCloneShouldFail()
    {
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, $this->test_repository);
        $cloned_object = clone $object;
    }

    /**
     *
     */
    public function test__toString()
    {
        $object = VersionControl_Hg_Container_Repository::getInstance($this->hg, $this->test_repository);

        ob_start();
            echo $object;
        $string_output = ob_get_contents();
        ob_clean();

        $this->assertEquals($this->test_repository, $string_output);
    }

}
